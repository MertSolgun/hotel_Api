{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "REST API",
    "description": "",
    "termsOfService": "https://github.com/MertSolgun?tab=repositories",
    "contact": {
      "name": "",
      "email": "solgunmert@gmail.com"
    },
    "license": {
      "name": "ISC"
    }
  },
  "host": "127.0.0.1:8003",
  "basePath": "/",
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "Token": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Simple Token Authentication * Example: <b>Token ...tokenKey...</b>"
    },
    "Bearer": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "JWT Authentication * Example: <b>Bearer ...accessToken...</b>"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/user/": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List User",
        "description": "  You can send query with endpoint for filter[], search[], sort[], page and limit.  <ul> Examples:   <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>   <li>URL/?<b>page=2&limit=1</b></li>  </ul>  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create User",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "isAdmin": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get Single User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "isAdmin": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "isAdmin": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/reservation/": {
      "get": {
        "tags": [
          "Reservation"
        ],
        "summary": "List Reservation ",
        "description": "  You can send query with endpoint for filter[], search[], sort[], page and limit.  <ul> Examples:   <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>   <li>URL/?<b>page=2&limit=1</b></li>  </ul>  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Reservation"
        ],
        "summary": "Create Reservation",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "roomId": {
                  "example": "any"
                },
                "arrival_date": {
                  "example": "any"
                },
                "departure_date": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/reservation/{id}": {
      "get": {
        "tags": [
          "Reservation"
        ],
        "summary": "Get Single Reservation",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Reservation"
        ],
        "summary": "Update Reservation",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Reservation"
        ],
        "summary": "Delete Reservation",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Reservation"
        ],
        "summary": "Update Reservation",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/room/": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "summary": "List Rooms",
        "description": "  You can send query with endpoint for filter[], search[], sort[], page and limit.  <ul> Examples:   <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>   <li>URL/?<b>page=2&limit=1</b></li>  </ul>  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Room"
        ],
        "summary": "Create Room",
        "description": "",
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/room/{id}": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Get Single Room",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Room"
        ],
        "summary": "Update Room",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "image": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Room"
        ],
        "summary": "Delete Room",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Room"
        ],
        "summary": "Update Room",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "image": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/token/": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "summary": "List Tokens",
        "description": "  You can send query with endpoint for filter[], search[], sort[], page and limit.  <ul> Examples:   <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>   <li>URL/?<b>page=2&limit=1</b></li>  </ul>  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Create Token",
        "description": "",
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/token/{id}": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "summary": "Get Single Token",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Tokens"
        ],
        "summary": "Update Token",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Tokens"
        ],
        "summary": "Delete Token",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Tokens"
        ],
        "summary": "Update Token",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "example": "any"
                },
                "email": {
                  "example": "any"
                },
                "password": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "definitions": {
    "Models": {
      "type": "object",
      "properties": {
        "reservation": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "function"
                },
                "ref": {
                  "type": "string",
                  "example": "user"
                },
                "required": {
                  "type": "boolean",
                  "example": true
                }
              }
            },
            "roomId": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "function"
                },
                "ref": {
                  "type": "string",
                  "example": "room"
                },
                "required": {
                  "type": "boolean",
                  "example": true
                }
              }
            },
            "arrival_date": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "function"
                },
                "required": {
                  "type": "boolean",
                  "example": true
                }
              }
            },
            "departure_date": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "function"
                },
                "required": {
                  "type": "boolean",
                  "example": true
                },
                "validate": {
                  "type": "object",
                  "properties": {
                    "validator": {
                      "type": "function"
                    },
                    "message": {
                      "type": "string",
                      "example": "Departure date must be greater than arrival date"
                    }
                  }
                }
              }
            },
            "guest_number": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "function"
                },
                "required": {
                  "type": "boolean",
                  "example": true
                }
              }
            },
            "night": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "function"
                },
                "default": {
                  "type": "function"
                },
                "transform": {
                  "type": "function"
                }
              }
            },
            "price": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "function"
                },
                "required": {
                  "type": "boolean",
                  "example": true
                }
              }
            },
            "totalPrice": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "function"
                },
                "default": {
                  "type": "function"
                },
                "transform": {
                  "type": "function"
                }
              }
            }
          }
        },
        "room": {
          "type": "object",
          "properties": {
            "room_number": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "function"
                },
                "required": {
                  "type": "boolean",
                  "example": true
                }
              }
            },
            "image": {
              "type": "array",
              "example": [],
              "items": {}
            },
            "bed_type": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "function"
                },
                "trim": {
                  "type": "boolean",
                  "example": true
                },
                "required": {
                  "type": "boolean",
                  "example": true
                }
              }
            },
            "price": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "function"
                },
                "required": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        },
        "user": {
          "type": "object",
          "properties": {
            "username": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "function"
                },
                "trim": {
                  "type": "boolean",
                  "example": true
                },
                "required": {
                  "type": "boolean",
                  "example": true
                },
                "unique": {
                  "type": "boolean",
                  "example": true
                }
              }
            },
            "password": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "function"
                },
                "trim": {
                  "type": "boolean",
                  "example": true
                },
                "required": {
                  "type": "boolean",
                  "example": true
                },
                "set": {
                  "type": "function"
                }
              }
            },
            "email": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "function"
                },
                "trim": {
                  "type": "boolean",
                  "example": true
                },
                "required": {
                  "type": "boolean",
                  "example": true
                },
                "validate": {
                  "type": "array",
                  "example": [
                    null,
                    "Please enter a valid email"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "isActive": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "function"
                },
                "default": {
                  "type": "boolean",
                  "example": true
                }
              }
            },
            "isAdmin": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "function"
                },
                "default": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "Token": []
    },
    {
      "Bearer": []
    }
  ]
}